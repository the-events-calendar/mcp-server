/**
 * Build script to generate PHP file with MCP tool definitions for AI Service
 */

import { writeFileSync, mkdirSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { getToolDefinitionsForPhp } from '../shared/tool-definitions.js';

const __dirname = dirname(fileURLToPath(import.meta.url));

/**
 * Generate the PHP file content
 */
function generatePhpFile(): string {
  const toolDefinitionsJson = getToolDefinitionsForPhp();
  
  return `<?php
/**
 * MCP Tool Definitions for The Events Calendar
 * 
 * This file is auto-generated by the MCP server build process.
 * DO NOT EDIT MANUALLY - changes will be lost on next build.
 * 
 * Generated on: ${new Date().toISOString()}
 * 
 * @package TheEventsCalendar
 * @subpackage MCP
 */

// Prevent direct access
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

/**
 * Get MCP tool definitions for The Events Calendar
 * 
 * @return array Tool definitions in MCP format
 */
function tec_get_mcp_tool_definitions() {
    return json_decode( '${toolDefinitionsJson}', true );
}

/**
 * Get a specific tool definition by name
 * 
 * @param string $tool_name The name of the tool
 * @return array|null Tool definition or null if not found
 */
function tec_get_mcp_tool_definition( $tool_name ) {
    $tools = tec_get_mcp_tool_definitions();
    
    foreach ( $tools as $tool ) {
        if ( $tool['name'] === $tool_name ) {
            return $tool;
        }
    }
    
    return null;
}

/**
 * Get all tool names
 * 
 * @return array List of tool names
 */
function tec_get_mcp_tool_names() {
    $tools = tec_get_mcp_tool_definitions();
    return array_column( $tools, 'name' );
}

// For direct inclusion, return the tool definitions
return tec_get_mcp_tool_definitions();
`;
}

/**
 * Main build function
 */
async function build() {
  try {
    // Create output directory if it doesn't exist
    const outputDir = join(__dirname, '../../../dist/wordpress');
    mkdirSync(outputDir, { recursive: true });
    
    // Generate PHP file
    const phpContent = generatePhpFile();
    const outputPath = join(outputDir, 'tec-mcp-tools-ai-service.php');
    
    // Write the file
    writeFileSync(outputPath, phpContent, 'utf8');
    
    console.log(`✅ Successfully generated PHP file: ${outputPath}`);
    
    // Also generate a JSON file for reference
    const { getToolDefinitions } = await import('../shared/tool-definitions.js');
    const jsonPath = join(outputDir, 'tec-mcp-tools-ai-service.json');
    writeFileSync(jsonPath, JSON.stringify(getToolDefinitions(), null, 2), 'utf8');
    
    console.log(`✅ Also generated JSON file for reference: ${jsonPath}`);
    
  } catch (error) {
    console.error('❌ Build failed:', error);
    process.exit(1);
  }
}

// Run the build
build();