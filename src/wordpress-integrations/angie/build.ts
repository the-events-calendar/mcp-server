#!/usr/bin/env node
/**
 * Build script to bundle the Angie integration into a self-contained JavaScript file using esbuild
 */

import * as esbuild from 'esbuild';
import { resolve, dirname } from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';
import { unlinkSync, existsSync } from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function build() {
  const tempFile = resolve(__dirname, 'tools-data.json');
  
  // Parse command line arguments
  const args = process.argv.slice(2);
  const helpIndex = args.findIndex(arg => arg === '--help' || arg === '-h');
  const minifyIndex = args.findIndex(arg => arg === '--minify' || arg === '-m');
  const outputIndex = args.findIndex(arg => arg === '--output' || arg === '-o');
  
  // Check for help option
  if (helpIndex !== -1) {
    console.log(`
Usage: tec-mcp-build-wp-angie [options] <output-file>

Arguments:
  <output-file>            Path to write the bundled JavaScript file

Options:
  -o, --output <file>      Alternative way to specify output file
  -m, --minify             Minify the output JavaScript
  -h, --help               Show this help message

Examples:
  # Generate unminified (development)
  tec-mcp-build-wp-angie tec-mcp-server.js
  tec-mcp-build-wp-angie --output tec-mcp-server.js
  tec-mcp-build-wp-angie -o tec-mcp-server.js
  
  # Generate minified (production)
  tec-mcp-build-wp-angie --minify tec-mcp-server.min.js
  tec-mcp-build-wp-angie -m -o tec-mcp-server.min.js
  tec-mcp-build-wp-angie --output tec-mcp-server.min.js --minify
`);
    process.exit(0);
  }
  
  // Determine output file
  let outputFile: string | undefined;
  
  if (outputIndex !== -1 && outputIndex + 1 < args.length) {
    outputFile = args[outputIndex + 1];
  } else {
    // Find the last argument that isn't a flag
    const nonFlagArgs = args.filter(arg => !arg.startsWith('-'));
    outputFile = nonFlagArgs[nonFlagArgs.length - 1];
  }
  
  if (!outputFile) {
    console.error('‚ùå Error: No output file specified');
    console.error('Run with --help for usage information');
    process.exit(1);
  }
  
  // Check for minify option
  const shouldMinify = minifyIndex !== -1;
  
  try {
    // Step 1: Extract tool definitions to JSON
    console.error('Extracting tool definitions...');
    execSync(`tsx ${resolve(__dirname, 'extract-tools.ts')}`, { stdio: 'inherit' });
    
    // Step 2: Bundle the MCP server with the extracted data
    console.error(`Bundling MCP server${shouldMinify ? ' (minified)' : ''}...`);
    const result = await esbuild.build({
      entryPoints: [resolve(__dirname, 'tec-mcp-server-simple.ts')],
      bundle: true,
      format: 'iife',  // IIFE format for browser script tag
      globalName: 'TEC_MCP',  // Global variable name
      platform: 'browser',
      target: 'es2015',  // Broader browser support
      write: false,
      minify: shouldMinify,
      sourcemap: false,
      loader: {
        '.json': 'json'
      },
      define: {
        'window': 'globalThis',
        'document': 'globalThis.document'
      },
      // Bundle the Angie SDK
      external: [],  // Bundle everything, including @elementor/angie-sdk
      // Add banner with generation info
      banner: {
        js: `/**
 * MCP Server for The Events Calendar - Angie Integration
 * 
 * This file is auto-generated by the MCP server build process.
 * DO NOT EDIT MANUALLY - changes will be lost on next build.
 * 
 * Generated on: ${new Date().toISOString()}
 * 
 * Usage:
 * 1. Ensure WordPress API settings are available:
 *    window.wpApiSettings = { root: '...', nonce: '...' }
 * 
 * 2. Include this file:
 *    <script src="tec-mcp-server.js"></script>
 * 
 * 3. The server will auto-initialize when DOM is ready
 * 
 * 4. Access via global variable:
 *    console.log(window.TEC_MCP);
 *    console.log(window.TEC_MCP.server);
 *    console.log(window.TEC_MCP.tools);
 * 
 * @package TheEventsCalendar
 * @subpackage MCP_Angie
 */`
      },
    });

    // Write to output file
    if (result.outputFiles && result.outputFiles.length > 0) {
      const outputPath = resolve(process.cwd(), outputFile);
      const { writeFileSync, mkdirSync } = await import('fs');
      const { dirname: getDirname } = await import('path');
      
      // Ensure output directory exists
      const outputDir = getDirname(outputPath);
      mkdirSync(outputDir, { recursive: true });
      
      // Write the bundled file
      writeFileSync(outputPath, result.outputFiles[0].text);
      
      console.error(`‚úÖ Successfully built: ${outputPath}`);
      console.error(`üìè Size: ${(result.outputFiles[0].text.length / 1024).toFixed(2)} KB${shouldMinify ? ' (minified)' : ''}`);
    } else {
      throw new Error('No output generated');
    }
  } catch (error) {
    console.error('‚ùå Build failed:', error);
    process.exit(1);
  } finally {
    // Clean up temp file
    if (existsSync(tempFile)) {
      unlinkSync(tempFile);
    }
  }
}

// Run the build
build();